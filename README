#summary README of the IDL-SQL package

= Introduction =
                       IDL_SQL package
Author: Sergey Koposov, Max Planck Institute for Astronomy
                        Institute of Astronomy Cambridge (2005-2011)
Email: koposov AT ast DOT cam DOT ac DOT uk
Web: http://lnfm1.sai.msu.ru/~math

This package provides 1 function
        get_sql()
and 2 procedures
        get_sql_col and exec_sql

which allows you to execute the SQL queries and obtain its results in IDL

= Details =
* GET_SQL() function

get_sql executes the query and returns the 2d array with the
results. All the datatypes in the results are converted to doubles or ints
or strings (The default type is double)

Example:

IDL> dat=get_sql("select ra,dec from rc3")
IDL> help,dat
DAT             DOUBLE    = Array[2, 23011]

IDL> dat=get_sql("select name,altname from rc3", /string)
IDL> help,dat
DAT             STRING    = Array[2, 23011]

IDL> dat=get_sql("select pa,w20 from rc3", /long)
IDL> help,dat
DAT             LONG      = Array[2, 23011]



If the casting of the column to the resulting type does not succeed, the
exception is thrown:


IDL> dat=get_sql('select name,altname from rc3')
% GET_SQL: Exception thrown: org.postgresql.util.PSQLException: Bad value for
           type double : ESO  342- 13
% Error occurred at: GET_SQL           145 /opt/idl_libs/idl_sql/get_sql.pro



* GET_SQL_COL procedure

The get_sql_col procedure does almost the same as the get_sql() function, but it puts the results not in one big 2d array, but in a named 1d
arrays(columns):


IDL> get_sql_col,'select name,altname from rc3',name,altname, /string
IDL> help,name
NAME            STRING    = Array[23011]
IDL> help,altname
ALTNAME            STRING    = Array[23011]


* EXEC_SQL procedure

The exec_sql procedure can be used to execute arbitrary DB commands without retrieving the results:


IDL> exec_sql,'create table tmp(ra real, dec real)'
IDL> exec_sql,'drop table tmp'


= Configuration = 

To properly work, you need to set-up the access to your database.
== JDBC driver ==
You need a JDBC driver for your database, which is simply the jar file. Download it (if you are using PostgreSQL from here http://jdbc.postgresql.org/download/postgresql-8.4-702.jdbc3.jar ) and append the path to the jar file to your CLASSPATH enviromental variable. 
== Setup the IDL java bridge==
*IMPORTANT*
IF you have a recent version of IDL (7.1 and maybe 7.0) this step may not be needed. But I noticed that sometimes the java version bundled with IDL may be different from the installed on the system, which lead to java errors. In that case I recommend doing the steps described below.

You need to assign to the IDLJAVAB_LIB_LOCATION variable a path to the directory where libjvm.so (or libjvm.dylib if you are on Mac) from the JRE installation is located.
It should look approximately like that
{{{export IDLJAVAB_LIB_LOCATION=$JAVA_HOME/jre/lib/i386/client/}}} 
It may contain amd64 instead of i386 in the path if you are on the 64-bit platform.

Then you need to put in the ~/.idljavabrc file the following lines 

JVM Classpath = $CLASSPATH:path_where_this_idl_sql_package_is_located
JVM Option1 = -Xmx1024m

The second option is needed if you want to work with large datasets
== Setting up of the database connection parameters==

You have several ways to specify the parameters of your connection to the database
One is to directly specify all the parameters of the connection as keywords of the function call.


IDL> radec=get_sql('select ra,dec from vvds', DB='wsdb', USER='math',
    HOST='localhost', PORT='5432', PASS='', DRIVER='org.postgresql.Driver', PROTOCOL='jdbc:postgresql://')
IDL> help,radec
RADEC           DOUBLE    = Array[2, 1599]

You can do that either by using all the appriate keywords USER,PASS,HOST,PROTOCOL etc, or just by using the URL keyword 
radec=get_sql('select ra,dec from vvds', URL='jdbc:postgresql://localhost:5432/wsdb', DRIVER='org.postgresql.Driver',user='math')

But the best way is to set up the connection parameters in the IDL startup file, as shown below:

defsysv, '!_IDL_SQL_DRIVER','org.postgresql.Driver'
defsysv, '!_IDL_SQL_USER','yourusername'
defsysv, '!_IDL_SQL_PASS',''
defsysv, '!_IDL_SQL_PROTOCOL','jdbc:postgresql://'
defsysv, '!_IDL_SQL_HOST','localhost'
defsysv, '!_IDL_SQL_PORT','5432'
defsysv, '!_IDL_SQL_DB','yourdbname'

then there is no need to specify any of the parameters of the
connection when you call the IDL-SQL functions. 
You just 

radec=get_sql('select ra,dec from vvds')

But you can still add the DB=, or HOST= options if you want to connect to other database or to other host. 

*If you fail to setup the java bridge or you are not satisfied with the performance, you may want to consider another interface between the database and IDL (but which only works for Postgresql):
https://github.com/segasai/pg_idl
